int sitting = 0;
int standing = 0;
int lying = 0;
int miss=0;
static unsigned long lastScan = 0;

#include <Arduino.h>
#include <Wire.h>
#include "BLEDevice.h"
#include "DHT.h"
#include <Adafruit_OLED_libraries/Adafruit_GFX.h>
#include <Adafruit_OLED_libraries/Adafruit_SSD1306.h>
//----model-------------------------------------------------------------------------------
#include <WiFi.h>
WiFiSSLClient client;
#include "StreamIO.h"
#include "VideoStream.h"
#include "RTSP.h"
#include "NNObjectDetection.h"
#include "VideoStreamOverlay.h"
#define amb82_CHANNEL 0
#define CHANNELNN 3
#define NNWIDTH  576
#define NNHEIGHT 320
VideoSetting config(VIDEO_VGA, CAM_FPS, VIDEO_H264_JPEG, 1);
VideoSetting configNN(NNWIDTH, NNHEIGHT, 10, VIDEO_RGB, 0);
NNObjectDetection ObjDet;
RTSP rtsp;
StreamIO videoStreamer(1, 1);
StreamIO videoStreamerNN(1, 1);
int rtsp_portnum;
uint32_t img_addr = 0;
uint32_t img_len = 0;
//----beacon----
unsigned long last = 0;
BLEAdvertData foundDevice;

void scanFunction(T_LE_CB_DATA* p_data)
{
    foundDevice.parseScanInfo(p_data);

    if (foundDevice.hasName() && foundDevice.getName() == String("R23110009")) {
        Serial.println("üì° ÊúâÊé•Âà∞");
        Serial.print("Ë∑ùÈõ¢‰∏äÊ¨°ÊôÇÈñì(ms): ");
        Serial.println(millis() - last);
        last = millis();
        Serial.print("üì∂ RSSI: ");
        Serial.println(foundDevice.getRSSI());
    }
}
//----------------------------------------------------
char _lwifi_ssid[] = "‰πù";
char _lwifi_pass[] = "zxcvbnmlp";
void initWiFi() {

  for (int i=0;i<2;i++) {
    WiFi.begin(_lwifi_ssid, _lwifi_pass);

    delay(1000);
    Serial.println("");
    Serial.print("Connecting to ");
    Serial.println(_lwifi_ssid);

    long int StartTime=millis();
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        if ((StartTime+5000) < millis()) break;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("");
      Serial.println("STAIP address: ");
      Serial.println(WiFi.localIP());
      Serial.println("");

      break;
    }
  }
}

#ifndef __OBJECTCLASSLIST_H__
#define __OBJECTCLASSLIST_H__
struct ObjectDetectionItem {
    uint8_t index;
    const char* objectName;
    uint8_t filter;
};
ObjectDetectionItem itemList[3] = {
    {0, "lying", 1},
    {1, "sitting", 1},
    {2, "standing", 1},
};
#endif

void ODPostProcess(std::vector<ObjectDetectionResult> results) {
    sitting = 0;
    standing = 0;
    lying = 0;
    uint16_t im_h = config.height();
    uint16_t im_w = config.width();
    OSD.createBitmap(amb82_CHANNEL);
    if (ObjDet.getResultCount() > 0) {
        for (int i = 0; i < ObjDet.getResultCount(); i++) {
            int obj_type = results[i].type();
            if (itemList[obj_type].filter) {
                ObjectDetectionResult item = results[i];
                int xmin = (int)(item.xMin() * im_w);
                int xmax = (int)(item.xMax() * im_w);
                int ymin = (int)(item.yMin() * im_h);
                int ymax = (int)(item.yMax() * im_h);
                //printf("Item %d %s:\t%d %d %d %d\n\r", i, itemList[obj_type].objectName, xmin, xmax, ymin, ymax);
                OSD.drawRect(amb82_CHANNEL, xmin, ymin, xmax, ymax, 3, OSD_COLOR_WHITE);
                char text_str[20];
                snprintf(text_str, sizeof(text_str), "%s %d", itemList[obj_type].objectName, item.score());
                OSD.drawText(amb82_CHANNEL, xmin, ymin - OSD.getTextHeight(amb82_CHANNEL), text_str, OSD_COLOR_CYAN);
  Serial.println((String(String(itemList[obj_type].objectName))+String(", ")+String(item.score())+String(", ")+String(xmin)+String(", ")+String(ymin)+String(", ")+String(xmax)+String(", ")+String(ymax)+String(", ")+String((xmax-xmin))+String(", ")+String((ymax-ymin))));
  if ((String(itemList[obj_type].objectName)=="sitting")) {
    sitting = sitting + 1;
  }
  if ((String(itemList[obj_type].objectName)=="standing")) {
    standing = standing + 1;
  }
  if ((String(itemList[obj_type].objectName)=="lying")) {
    lying = lying + 1;
  }
            }
        }
    }
  //Serial.println((String("Áâ©‰ª∂Êï∏Ôºö")+String(ObjDet.getResultCount())+String(", ÂùêËëóÔºö")+String(sitting)+String(",Á´ôËëóÔºö")+String(standing)+String(",Ë∫∫ËëóÔºö")+String(lying)));
  
    OSD.update(amb82_CHANNEL);
}
//-----------------------------------------------------------------------------------------

#define SCREEN_WIDTH 128	  //Ë®≠ÂÆöOLEDËû¢ÂπïÁöÑÂØ¨Â∫¶ÂÉèÁ¥†
#define SCREEN_HEIGHT 64	  //Ë®≠ÂÆöOLEDËû¢ÂπïÁöÑÂØ¨Â∫¶ÂÉèÁ¥†
#define OLED_RESET -1 		  //Reset pinÂ¶ÇÊûúOLED‰∏äÊ≤íÊúâRESETËÖ≥‰Ωç,Â∞áÂÆÉË®≠ÁΩÆÁÇ∫-1

#define UART_SERVICE_UUID      "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

#define STRING_BUF_SIZE 100

BLEService UartService(UART_SERVICE_UUID);
BLECharacteristic Rx(CHARACTERISTIC_UUID_RX);
BLECharacteristic Tx(CHARACTERISTIC_UUID_TX);
BLEAdvertData advdata;
BLEAdvertData scndata;
bool notify = false;

String lastCommand = "";  // ÂÑ≤Â≠ò‰æÜËá™ÊâãÊ©üÁöÑÊúÄÂæå‰∏ÄÂÄãÂëΩ‰ª§

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
bool OLEDStatus = true;

static const unsigned char PROGMEM str_1[]={		 //Ê∫´
0x00,0x08,0x43,0xFC,0x32,0x08,0x12,0x08,0x83,0xF8,0x62,0x08,0x22,0x08,0x0B,0xF8,
0x10,0x00,0x27,0xFC,0xE4,0xA4,0x24,0xA4,0x24,0xA4,0x24,0xA4,0x2F,0xFE,0x20,0x00
};
static const unsigned char PROGMEM str_2[]={		//Â∫¶
0x01,0x00,0x00,0x84,0x3F,0xFE,0x22,0x20,0x22,0x20,0x3F,0xFC,0x22,0x20,0x22,0x20,
0x23,0xE0,0x20,0x00,0x2F,0xF8,0x24,0x10,0x22,0x60,0x41,0x80,0x86,0x60,0x38,0x0E
};

static const unsigned char PROGMEM str_3[]={		//Êøï
0x00,0x04,0x47,0xFE,0x34,0x04,0x17,0xFC,0x84,0x04,0x67,0xFC,0x21,0x08,0x0A,0x12,
0x17,0xBC,0x21,0x08,0xE2,0x52,0x27,0xDE,0x20,0x00,0x25,0x24,0x24,0x92,0x28,0x92
};

// ------------------ DHT ÊÑüÊ∏¨Âô®Ë®≠ÂÆö ------------------
#define DHTPIN 8         // DHT Ë≥áÊñôËÖ≥‰Ωç (ÈÅøÂÖç‰ΩøÁî® I2C ËÖ≥‰Ωç)
#define DHTTYPE DHT11    // DHT11 Êàñ DHT22
DHT dht(DHTPIN, DHTTYPE);

// ------------------ LED ËÖ≥‰ΩçÂÆöÁæ© ------------------
#define GREEN_LED 18
#define RED_LED   19

// ------------------ ‰∏äÂÇ≥ÈñìÈöî (ÊØ´Áßí) ------------------
unsigned long previousMillis = 0;
const unsigned long interval = 1000; // ÊØè 10 Áßí

// Êö´Â≠òÂæû Serial Monitor Ëº∏ÂÖ•ÁöÑÊåá‰ª§ (pass-through)
String dataFromSerial;

void writeCB (BLECharacteristic* chr, uint8_t connID) {
    if (chr->getDataLen() > 0) {
        String cmd = chr->readString();
        Serial.print("Received string: ");
        Serial.println(cmd);
        lastCommand = cmd;
    }
}

void notifCB (BLECharacteristic* chr, uint8_t connID, uint16_t cccd) {
    if (cccd & GATT_CLIENT_CHAR_CONFIG_NOTIFY) {
        printf("Notifications enabled on Characteristic %s for connection %d \n", chr->getUUID().str(), connID);
        notify = true;
    } else {
        printf("Notifications disabled on Characteristic %s for connection %d \n", chr->getUUID().str(), connID);
        notify = false;
    }
}

void setup() {
 
  Serial.begin(115200);        // Ë®≠ÂÆöÁ°¨È´î‰∏≤ÂàóÂü†ÈÄüÁéá
  Serial3.begin(115200);       // Ë®≠ÂÆö Serial3 Ëàá EK ÊùøÈÄöË®ä
  initWiFi();
  delay(1000);
//--------model----------------------------------------------------------------
  config.setBitrate(2 * 1024 * 1024);
  Camera.configVideoChannel(amb82_CHANNEL, config);
  Camera.configVideoChannel(CHANNELNN, configNN);
  Camera.videoInit();
  rtsp.configVideo(config);
  rtsp.begin();
  rtsp_portnum = rtsp.getPort();
  ObjDet.configVideo(configNN);
  ObjDet.setResultCallback(ODPostProcess);
  ObjDet.modelSelect(OBJECT_DETECTION, CUSTOMIZED_YOLOV4TINY, NA_MODEL, NA_MODEL);
  ObjDet.begin();
  videoStreamer.registerInput(Camera.getStream(amb82_CHANNEL));
  videoStreamer.registerOutput(rtsp);
  if (videoStreamer.begin() != 0) {
      Serial.println("StreamIO link start failed");
  }
  Camera.channelBegin(amb82_CHANNEL);
  videoStreamerNN.registerInput(Camera.getStream(CHANNELNN));
  videoStreamerNN.setStackSize();
  videoStreamerNN.setTaskPriority();
  videoStreamerNN.registerOutput(ObjDet);
  if (videoStreamerNN.begin() != 0) {
      Serial.println("StreamIO link start failed");
  }
  Camera.channelBegin(CHANNELNN);
  OSD.configVideo(amb82_CHANNEL, config);
  OSD.begin();

  //‰ΩøÁî®Ëá™Ë®ÇyoloÊ®°ÂûãÊñºSDÂç°ËºâÂÖ•ÔºåÈ†àÈñãÂïüÂÖßÂª∫Arduino IDEÈÅ∏ÊìáÊ®°Âûã‰æÜÊ∫êÁÇ∫SDÂç°ÂæåÁáíÈåÑ„ÄÇ
  //--------------------------------------------------------------------------------------

  advdata.addFlags();
  advdata.addCompleteName("petcare");
  scndata.addCompleteServices(BLEUUID(UART_SERVICE_UUID));

  Rx.setWriteProperty(true);
  Rx.setWritePermissions(GATT_PERM_WRITE);
  Rx.setWriteCallback(writeCB);
  Rx.setBufferLen(STRING_BUF_SIZE);
  Tx.setReadProperty(true);
  Tx.setReadPermissions(GATT_PERM_READ);
  Tx.setNotifyProperty(true);
  Tx.setCCCDCallback(notifCB);
  Tx.setBufferLen(STRING_BUF_SIZE);

  UartService.addCharacteristic(Rx);
  UartService.addCharacteristic(Tx);

  BLE.init();
  BLE.configAdvert()->setAdvData(advdata);
  BLE.configAdvert()->setScanRspData(scndata);
  BLE.configServer(1);
  BLE.addService(UartService);
//--beacon----------
  BLE.configScan()->setScanMode(GAP_SCAN_MODE_ACTIVE);    // Active mode requests for scan response packets
  BLE.configScan()->setScanInterval(200);                 // Start a scan every 500ms
  BLE.configScan()->setScanWindow(200);                   // Each scan lasts for 250ms
  BLE.configScan()->updateScanParams();
  // Provide a callback function to process scan data.
  // If no function is provided, default BLEScan::printScanInfo is used
  BLE.setScanCallback(scanFunction);
  //BLE.beginCentral(0);
//----------------------------
  //BLE.beginPeripheral();

  Serial.println("sip reset");
  Serial3.write("sip reset");    // ÂàùÂßãÂåñ
  while (Serial3.available() <= 0) {}
  Serial.println(Serial3.readString());
  delay(1000);

  Serial.println("mac join abp");   // Ë®≠ÂÆö join mode
  Serial3.write("mac join abp");
  while (Serial3.available() <= 0) {}
  Serial.println(Serial3.readString());
  delay(1000);
  Serial.println("==============");

  // ÂàùÂßãÂåñ DHT ÊÑüÊ∏¨Âô®
  dht.begin();

  if(!display.begin(SSD1306_SWITCHCAPVCC,0x3c)) {      	//Ë®≠ÂÆö‰ΩçÂùÄÁÇ∫ 0x3c
    Serial.println(F("SSD1306 allocation falled"));   		 	//F(Â≠ó‰∏≤):Â∞áÂ≠ó‰∏≤ÂÑ≤Â≠òÂú®fash‰∏¶ÈùûÂú®RAM
    OLEDStatus = false;		   							//ÈñãÂïüOLEDÂ§±Êïó
  } 

  // ÂàùÂßãÂåñ LED ËÖ≥‰Ωç
  pinMode(GREEN_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);
  digitalWrite(GREEN_LED, LOW);
  digitalWrite(RED_LED, LOW);

  Serial.println("=== Arduino Mega: DHT -> EK board, Downlink -> LED ===");
}
int i=0;
void loop() {

  //----beacon-------
  //BLE.configScan()->startScan(1000); // ÊØèÊ¨°ÊéÉÊèè 1 Áßí
  // delay(500); // ÈÅøÂÖçÈÅéÂ∫¶ÂëºÂè´Ôºå500ms Ë∂≥Â§†
  //if(millis() - last > 30000){
  //  miss=1;
  //  Serial.println("WARNING!!!!!!!!!!");
  //}
  //else{
  //  miss=0;
  //}

  
  if (millis() - lastScan > 60000) {  // ÊØè 3 ÁßíÂïüÂãï‰∏ÄÊ¨° scan
    BLE.beginCentral(0);
    Serial.println("central");
    BLE.configScan()->startScan(1000);  // scan 100ms
    lastScan = millis();
  }
  if(millis() - last > 300000){
    miss=1;
    Serial.println("WARNING!!!!!!!!!!");
  }
  else{
    miss=0;
  }
  // delay(5000);
  
  BLE.beginPeripheral();
  //----------------
  // ----------------------------------------------------------------------
  // A) ÈÄèÈÅé Serial Monitor Ëº∏ÂÖ•Êåá‰ª§Ôºåpass-through Áµ¶ EK Êùø
  // ----------------------------------------------------------------------
  if (Serial.available()) {
    dataFromSerial = Serial.readString();  // ËÆÄÂèñ‰ΩøÁî®ËÄÖËº∏ÂÖ•ÁöÑÂ≠ó‰∏≤
    dataFromSerial.trim();
    if (dataFromSerial.length() > 0) {
      Serial3.println(dataFromSerial);
      while (Serial3.available() <= 0) {}
      String resp = Serial3.readString();
      Serial.println(resp);
    }
  }

  // ----------------------------------------------------------------------
  // B) ÂÆöÊúü (ÊØè 10 Áßí) ËÆÄÂèñ DHT ÊÑüÊ∏¨Âô®Ôºå‰∏¶‰∏äÂÇ≥ (uplink)
  // ----------------------------------------------------------------------
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    
    if (isnan(h) || isnan(t)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
      // Â∞áÊ∫´Â∫¶„ÄÅÊøïÂ∫¶‰πò‰ª• 100 ÂèñÂæóÊï¥Êï∏ (‰øùÁïôÂÖ©‰ΩçÂ∞èÊï∏)
      int16_t tempScaled = (int16_t)(t * 100);
      int16_t humScaled  = (int16_t)(h * 100);

      // ËΩâÊàê 16 ÈÄ≤‰ΩçÂ≠ó‰∏≤ÔºåÂâç 4 Á¢ºÊ∫´Â∫¶„ÄÅÂæå 4 Á¢ºÊøïÂ∫¶ (ÂÖ± 8 Á¢º)
      //char payload[9];
      //sprintf(payload, "%04X%04X", (uint16_t)tempScaled, (uint16_t)humScaled);

      uint16_t objCount = ObjDet.getResultCount();
      uint16_t sit = sitting;
      uint16_t stand = standing;
      uint16_t lie = lying;
      uint16_t m = miss;

      // Âª∫Á´ã payloadÔºöÊ∫´Â∫¶(4Á¢º)+ÊøïÂ∫¶(4Á¢º)+Âùê(4Á¢º)+Á´ô(4Á¢º)+Ë∫∫(4Á¢º) = ÂÖ±20Á¢º
      char payload[25]; // 20 + 1 ÁÇ∫ null terminator
      sprintf(payload, "%04X%04X%04X%04X%04X%04X",
              (uint16_t)tempScaled,
              (uint16_t)humScaled,
              sit,
              stand,
              lie,
              m);

      // uplink Êåá‰ª§ (ÁØÑ‰æã: "mac tx uncnf 2 006400C8")
      //if(i<100){//Ê∏¨Ë©¶100Ê¨°ÁöÑÊàêÂäüÊ¨°Êï∏
      String cmd = "mac tx ucnf 2 ";
      cmd += payload;

      Serial.print("[Uplink]:  ");
      Serial.print(i);
      i=i+1;
      Serial.println();
      Serial.println(cmd);

      Serial.println((String("Áâ©‰ª∂Êï∏Ôºö")+String(ObjDet.getResultCount())+String(", ÂùêËëóÔºö")+String(sitting)+String(",Á´ôËëóÔºö")+String(standing)+String(",Ë∫∫ËëóÔºö")+String(lying)));
      //String statusMsg = String("Áâ©‰ª∂Êï∏Ôºö") + String(ObjDet.getResultCount()) +
      //                 String(", ÂùêËëóÔºö") + String(sitting) +
      //                 String(", Á´ôËëóÔºö") + String(standing) +
      //                 String(", Ë∫∫ËëóÔºö") + String(lying);

      // ÂÇ≥ÈÄÅÂà∞ EK ÊùøÔºåÊîπÁî® c_str() ËΩâÊèõÁÇ∫ C Â≠ó‰∏≤
      Serial3.write(cmd.c_str());
      //}

      // Á≠âÂæÖÂõûÊáâ (ÈòªÂ°ûÂºè)
      while(!Serial3.available()>0){}
      String resp = Serial3.readString();
      Serial.print("[Response] ");
      Serial.println(resp);



      //Serial3.write(statusMsg.c_str());
    }
  }
  // ----------------------------------------------------------------------
  // B) OLEDÈ°ØÁ§∫
  // ----------------------------------------------------------------------
   
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(F("¬∞C "));

  if(OLEDStatus==true) {
    display.clearDisplay();   		//Ê∏ÖÈô§Á∑©Ë°ùÂçÄË≥áÊñô
    display.setTextColor(WHITE, BLACK); 	//Ë®≠ÂÆöÁôΩÂ≠óÈªëÂ∫ï
    display.drawBitmap(0,	0,	str_1,	16,	16,	WHITE);		//Ê∫´,‰ΩçÁΩÆ(  0,0)Â≠óÂûãÂ§ßÂ∞è16*16È°èËâ≤ÁôΩËâ≤
    display.drawBitmap(18,	0,	str_2,	16,	16,	WHITE);		//Â∫¶,‰ΩçÁΩÆ(18,0)Â≠óÂûãÂ§ßÂ∞è16*16È°èËâ≤ÁôΩËâ≤
    display.setTextSize(2);  	 	//Ë®≠ÂÆöÂ≠óÂûãÂ§ßÂ∞èÁÇ∫2
    display.setCursor(35,0);     			//Ë®≠ÂÆöËµ∑ÂßãÈªû‰ΩçÁΩÆ(38,0)
    display.print(": ");		
    display.println(t);
    //display.println("¬∞C");

    display.drawBitmap(0,	30,	str_3,	16,	16,	WHITE);		//Ê∫´,‰ΩçÁΩÆ(  0,0)Â≠óÂûãÂ§ßÂ∞è16*16È°èËâ≤ÁôΩËâ≤
    display.drawBitmap(18,	30,	str_2,	16,	16,	WHITE);		//Â∫¶,‰ΩçÁΩÆ(18,0)Â≠óÂûãÂ§ßÂ∞è16*16È°èËâ≤ÁôΩËâ≤
    display.setTextSize(2);  	 	//Ë®≠ÂÆöÂ≠óÂûãÂ§ßÂ∞èÁÇ∫2
    display.setCursor(35, 30);     			//Ë®≠ÂÆöËµ∑ÂßãÈªû‰ΩçÁΩÆ(38,0)
    display.print(": ");		
    display.println(h); 
    //display.println("%");   
    display.display();   	

  }

  // ----------------------------------------------------------------------
  // C) BLE
  // ----------------------------------------------------------------------
  if (lastCommand == "Êü•Ë©¢Ê∫´ÊøïÂ∫¶") {
    lastCommand = "";  // ÈáçË®≠ÂëΩ‰ª§ÈÅøÂÖçÈáçË§áÂÇ≥ÈÄÅ

    if (isnan(h) || isnan(t)) {
        Serial.println("ËÆÄÂèñ DHT ÊÑüÊ∏¨Âô®Â§±ÊïóÔºÅ");
        return;
    }

    String msg = ("ÊøïÂ∫¶: " + String(h) + "%\t" + "Ê∫´Â∫¶: " + String(t) + "¬∞C");

    Tx.writeString(msg);

    if (BLE.connected(0) && notify) {
        Tx.notify(0);  // Ê≠£Á¢∫ÁöÑÂëºÂè´ÊñπÂºèÔºåÂ∏∂ÂÖ• connID = 0
        Serial.println("ÈÄöÁü•Â∑≤ÁôºÈÄÅÔºÅ");
    } else {
        Serial.println("Â∞öÊú™ÂïüÁî® notify ÊàñÂ∞öÊú™ÈÄ£Á∑öÔºÅ");
    }
  }
  if (lastCommand == "Êü•Ë©¢ÂßøÊÖã") {
    lastCommand = "";  // ÈáçË®≠ÂëΩ‰ª§ÈÅøÂÖçÈáçË§áÂÇ≥ÈÄÅ


    //String msg1 = ("ÊøïÂ∫¶: " + String(h) + "%\t" + "Ê∫´Â∫¶: " + String(t) + "¬∞C");
    String msg1 = ("Áâ©‰ª∂Êï∏Ôºö"+String(ObjDet.getResultCount())+", ÂùêËëóÔºö"+String(sitting)+",Á´ôËëóÔºö"+String(standing)+",Ë∫∫ËëóÔºö"+String(lying));

    Tx.writeString(msg1);

    if (BLE.connected(0) && notify) {
        Tx.notify(0);  // Ê≠£Á¢∫ÁöÑÂëºÂè´ÊñπÂºèÔºåÂ∏∂ÂÖ• connID = 0
        Serial.println("ÈÄöÁü•Â∑≤ÁôºÈÄÅÔºÅ");
    } else {
        Serial.println("Â∞öÊú™ÂïüÁî® notify ÊàñÂ∞öÊú™ÈÄ£Á∑öÔºÅ");
    }
  }
  if (lastCommand == "Êü•Ë©¢ÁãÄÊÖã") {
    lastCommand = "";  // ÈáçË®≠ÂëΩ‰ª§ÈÅøÂÖçÈáçË§áÂÇ≥ÈÄÅ


    //String msg1 = ("ÊøïÂ∫¶: " + String(h) + "%\t" + "Ê∫´Â∫¶: " + String(t) + "¬∞C");
    
    if(miss==0){
      Tx.writeString("ÈÇÑÂú®Âì¶");
    }
    else{
      Tx.writeString("‰∏çË¶ã‰∫Ü");
    }
    

    if (BLE.connected(0) && notify) {
        Tx.notify(0);  // Ê≠£Á¢∫ÁöÑÂëºÂè´ÊñπÂºèÔºåÂ∏∂ÂÖ• connID = 0
        Serial.println("ÈÄöÁü•Â∑≤ÁôºÈÄÅÔºÅ");
    } else {
        Serial.println("Â∞öÊú™ÂïüÁî® notify ÊàñÂ∞öÊú™ÈÄ£Á∑öÔºÅ");
    }
  }
  // ----------------------------------------------------------------------
  // C) ÈùûÈòªÂ°ûÂºèÊ™¢Êü• Serial3 ÊòØÂê¶ÊúâÂÖ∂‰ªñË≥áÊñô
  // ----------------------------------------------------------------------
  if (Serial3.available()) {
    String r = Serial3.readString();
    Serial.print("[Serial3 async] ");
    Serial.println(r);
    // ÊéßÂà∂ LEDÔºàÊ†πÊìö‰∏ãË°åË≥áÊñô‰∏≠ÁöÑ "mac_rx" Ëàá "30" Êàñ "31"Ôºâ
    if (r.indexOf("mac rx") >= 0 && r.indexOf("30") >= 0) {
      //digitalWrite(GREEN_LED, HIGH);
      //digitalWrite(RED_LED, LOW);
      Serial.println("Downlink -> 30 => Green LED ON");
    }
    else if (r.indexOf("mac rx") >= 0 && r.indexOf("31") >= 0) {
      //digitalWrite(GREEN_LED, LOW);
      //digitalWrite(RED_LED, HIGH);
      Serial.println("Downlink -> 31 => Red LED ON");
    }
  }



  //delay(1000);
}
